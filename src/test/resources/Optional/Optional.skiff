class Optional<T> {
    private T data;

    def Optional(T data) {
        this.data = data;
    }

    static def of<U>(U data) -> Optional<U> {
        return new Optional<U>(data);
    }

    static def empty<U>() -> Optional<U> {
        return new Optional<U>(null);
    }

    def get() -> T {
        return data;
    }

    def isPresent() -> Bool {
        return data != null;
    }
}

def main(List<String> args) -> Int {
    let Optional<Int> op = Optional.of<Int>(5);
    if(op.isPresent()) {
        return op.get();
    } else {
        return 0;
    }
}

